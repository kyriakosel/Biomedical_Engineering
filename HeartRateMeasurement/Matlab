#define CLOCK_AMPLITUDE 1.0
#define CLOCK_THRESHOLD (CLOCK_AMPLITUDE/2.0)

#define BEATS_IN_SAMPLE 10
#define SECS_PER_CLK_TICK 1.0 // Depends on external clock

double previousClock = 0.0;
int    clockTicks = 0;

double previousSensor = 0.0;
double previousDifferentialofSensor = 0.0;

int    beats = 0;
double latestBeatsPerSec = 0.0;

#define BUFFER_DEPTH 10

int bufferPos = 0;
double sensorBuffer[BUFFER_DEPTH];

double GetBufferAverage(void)
{
	int i;
	double sum = 0.0;

	for(i=0;i<BUFFER_DEPTH;i++) {
		sum += sensorBuffer[i];
	}

	// Reort average across buffer
	return sum / BUFFER_DEPTH;
}

void CountBeats(double clk,double sensor,double *output)
{
	double differentialofSensor;
	double filteredSensor;

	// Check for rising edge of clock
	if((previousClock < CLOCK_THRESHOLD) && (clk >= CLOCK_THRESHOLD)) {
		clockTicks++;
	}

	// Log sensor
	sensorBuffer[bufferPos] = sensor;
	bufferPos++;
	if(bufferPos==BUFFER_DEPTH) {
		bufferPos = 0;
	}

	// Get filtered sensor
	filteredSensor = GetBufferAverage();

	// Check if sensor has hit peak
	differentialofSensor = filteredSensor - previousSensor;
	if((previousDifferentialofSensor > 0) && (differentialofSensor <= 0)) {
		beats++;
	}

	// Store for comparision on next cycle
	previousSensor = filteredSensor;
	previousDifferentialofSensor = differentialofSensor;
	previousClock = clk;

	// Compute beats
	if(beats==BEATS_IN_SAMPLE) {
		latestBeatsPerSec = ((double)(clockTicks) * SECS_PER_CLK_TICK) / (double)(BEATS_IN_SAMPLE);

		// Reset
		beats = 0;
		clockTicks = 0;
	}

	// Output result
	 *output = filteredSensor;
	//*output = latestBeatsPerSec;
	 
}
MATLAB Real time Simulation

clc 
SerialPort='com6'; %serial port
MaxDeviation = 5; %Voltage deviation 
TimeInterval=0.00;  %Input time
loop=12000;         %Value Count
 
 
s = serial(SerialPort);
fopen(s);
time =now;
voltage = 0;
 
%% Figure
figureHandle = figure('NumberTitle','off',...
    'Name','Voltage Characteristics',...
    'Color',[0 0 0],'Visible','off');
 
% Axes
axesHandle = axes('Parent',figureHandle,...
    'YGrid','on',...
    'YColor',[0.9725 0.9725 0.9725],...
    'XGrid','on',...
    'XColor',[0.9725 0.9725 0.9725],...
    'Color',[0 0 0]);
 
hold on;
 
plotHandle = plot(axesHandle,time,voltage,'Marker','.','LineWidth',1,'Color',[0 1 0]);
 
xlim(axesHandle,[min(time) max(time+0.001)]);
 
% Create xlabel
xlabel('Time(s)','FontWeight','bold','FontSize',14,'Color',[1 1 0]);
 
% Create ylabel
ylabel('Voltage','FontWeight','bold','FontSize',14,'Color',[1 1 0]);
 
% Title
title('Real time Data V vs T','FontSize',16,'Color',[1 1 0]);
 
%% Initializing variables
 
% voltage(1)=0;
time(1)=0;
count = 2;
tic;
while ~isequal(count,loop)
   
    serialText = fscanf(s,'%s');
    fprintf(1,'Count=%d Str= %s Toc=%f\n',count,serialText,toc);
    tic;
    if (count > 3) 
        serialFloat = sscanf(serialText,'%f');
    else 
        serialFloat = 0.0;
    end
    voltage(count,:) = serialFloat;
     
 
    voltage(1)=0;     
    if (voltage(count)-voltage(count-1)>MaxDeviation)
         voltage(count)=voltage(count-1);
    end
     
    time(count) = count;
    if (mod(count,20) == 0) 
        set(plotHandle,'YData',voltage,'XData',time);
        set(figureHandle,'Visible','on');
        datetick('x','mm/DD HH:MM');
    end
    
    pause(TimeInterval);
    count = count +1;
end
 
 
 
%%Clean
Clc
Clear all
Fclose(instrfind);
Delete(instrfind);
Close all
Clc
Disp(‘Serial Port Closed’)

Processing Code for Real Time
import processing.serial.*;
 
 Serial myPort;        // The serial port
 int xPos = 1;         // horizontal position of the graph
 
 void setup () {
 // set the window size:
 size(1000, 800);        
 
 // List all the available serial ports
 println(Serial.list());
 
 myPort = new Serial(this, Serial.list()[0], 9600);
 
 myPort.bufferUntil('\n');
 // set inital background:
 background(0);
 }
 void draw () {
 
 }
 
 void serialEvent (Serial myPort) {
 // get the ASCII string:
 String inString = myPort.readStringUntil('\n');
 
 if (inString != null) {
 
 inString = trim(inString);
 
 float inByte = float(inString); 
 inByte = map(inByte, 0, 1023, 0, height);
 
 // draw the line:
 stroke(247,6,18);
 line(xPos, height, xPos, height - inByte);
 
 // at the edge of the screen, go back to the beginning:
 if (xPos >= width) {
 xPos = 0;
 background(0); 
 } 
 else {
 // increment the horizontal position:
 xPos++;
 }
 }
 }

